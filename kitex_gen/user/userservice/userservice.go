// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/weirdo0314/tiny-tiktok/kitex_gen/user"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":     kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"MGetUser":       kitex.NewMethodInfo(mGetUserHandler, newMGetUserArgs, newMGetUserResult, false),
		"GetUser":        kitex.NewMethodInfo(getUserHandler, newGetUserArgs, newGetUserResult, false),
		"CheckUser":      kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"Follow":         kitex.NewMethodInfo(followHandler, newFollowArgs, newFollowResult, false),
		"CacelFollow":    kitex.NewMethodInfo(cacelFollowHandler, newCacelFollowArgs, newCacelFollowResult, false),
		"MGetFollowUser": kitex.NewMethodInfo(mGetFollowUserHandler, newMGetFollowUserArgs, newMGetFollowUserResult, false),
		"MGetFansUser":   kitex.NewMethodInfo(mGetFansUserHandler, newMGetFansUserArgs, newMGetFansUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(user.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *user.CreateUserRequest
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *user.CreateUserRequest

func (p *CreateUserArgs) GetReq() *user.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateUserResult struct {
	Success *user.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *user.CreateUserResponse

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(user.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *user.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.MGetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).MGetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetUserArgs:
		success, err := handler.(user.UserService).MGetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetUserResult)
		realResult.Success = success
	}
	return nil
}
func newMGetUserArgs() interface{} {
	return &MGetUserArgs{}
}

func newMGetUserResult() interface{} {
	return &MGetUserResult{}
}

type MGetUserArgs struct {
	Req *user.MGetUserRequest
}

func (p *MGetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetUserArgs) Unmarshal(in []byte) error {
	msg := new(user.MGetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetUserArgs_Req_DEFAULT *user.MGetUserRequest

func (p *MGetUserArgs) GetReq() *user.MGetUserRequest {
	if !p.IsSetReq() {
		return MGetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetUserResult struct {
	Success *user.MGetUserResponse
}

var MGetUserResult_Success_DEFAULT *user.MGetUserResponse

func (p *MGetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetUserResult) Unmarshal(in []byte) error {
	msg := new(user.MGetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetUserResult) GetSuccess() *user.MGetUserResponse {
	if !p.IsSetSuccess() {
		return MGetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.MGetUserResponse)
}

func (p *MGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserArgs:
		success, err := handler.(user.UserService).GetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserArgs() interface{} {
	return &GetUserArgs{}
}

func newGetUserResult() interface{} {
	return &GetUserResult{}
}

type GetUserArgs struct {
	Req *user.GetUserRequest
}

func (p *GetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserArgs_Req_DEFAULT *user.GetUserRequest

func (p *GetUserArgs) GetReq() *user.GetUserRequest {
	if !p.IsSetReq() {
		return GetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserResult struct {
	Success *user.GetUserResponse
}

var GetUserResult_Success_DEFAULT *user.GetUserResponse

func (p *GetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserResult) GetSuccess() *user.GetUserResponse {
	if !p.IsSetSuccess() {
		return GetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserResponse)
}

func (p *GetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(user.UserService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *user.CheckUserRequest
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(user.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *user.CheckUserRequest

func (p *CheckUserArgs) GetReq() *user.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckUserResult struct {
	Success *user.CheckUserResponse
}

var CheckUserResult_Success_DEFAULT *user.CheckUserResponse

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(user.CheckUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *user.CheckUserResponse {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CheckUserResponse)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).Follow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowArgs:
		success, err := handler.(user.UserService).Follow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowResult)
		realResult.Success = success
	}
	return nil
}
func newFollowArgs() interface{} {
	return &FollowArgs{}
}

func newFollowResult() interface{} {
	return &FollowResult{}
}

type FollowArgs struct {
	Req *user.RelationActionRequest
}

func (p *FollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowArgs) Unmarshal(in []byte) error {
	msg := new(user.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowArgs_Req_DEFAULT *user.RelationActionRequest

func (p *FollowArgs) GetReq() *user.RelationActionRequest {
	if !p.IsSetReq() {
		return FollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowResult struct {
	Success *user.BaseResponse
}

var FollowResult_Success_DEFAULT *user.BaseResponse

func (p *FollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowResult) Unmarshal(in []byte) error {
	msg := new(user.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowResult) GetSuccess() *user.BaseResponse {
	if !p.IsSetSuccess() {
		return FollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.BaseResponse)
}

func (p *FollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func cacelFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CacelFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CacelFollowArgs:
		success, err := handler.(user.UserService).CacelFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CacelFollowResult)
		realResult.Success = success
	}
	return nil
}
func newCacelFollowArgs() interface{} {
	return &CacelFollowArgs{}
}

func newCacelFollowResult() interface{} {
	return &CacelFollowResult{}
}

type CacelFollowArgs struct {
	Req *user.RelationActionRequest
}

func (p *CacelFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CacelFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CacelFollowArgs) Unmarshal(in []byte) error {
	msg := new(user.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CacelFollowArgs_Req_DEFAULT *user.RelationActionRequest

func (p *CacelFollowArgs) GetReq() *user.RelationActionRequest {
	if !p.IsSetReq() {
		return CacelFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CacelFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type CacelFollowResult struct {
	Success *user.BaseResponse
}

var CacelFollowResult_Success_DEFAULT *user.BaseResponse

func (p *CacelFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CacelFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CacelFollowResult) Unmarshal(in []byte) error {
	msg := new(user.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CacelFollowResult) GetSuccess() *user.BaseResponse {
	if !p.IsSetSuccess() {
		return CacelFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CacelFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.BaseResponse)
}

func (p *CacelFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetFollowUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.MGetRelationUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).MGetFollowUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetFollowUserArgs:
		success, err := handler.(user.UserService).MGetFollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetFollowUserResult)
		realResult.Success = success
	}
	return nil
}
func newMGetFollowUserArgs() interface{} {
	return &MGetFollowUserArgs{}
}

func newMGetFollowUserResult() interface{} {
	return &MGetFollowUserResult{}
}

type MGetFollowUserArgs struct {
	Req *user.MGetRelationUserRequest
}

func (p *MGetFollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetFollowUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetFollowUserArgs) Unmarshal(in []byte) error {
	msg := new(user.MGetRelationUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetFollowUserArgs_Req_DEFAULT *user.MGetRelationUserRequest

func (p *MGetFollowUserArgs) GetReq() *user.MGetRelationUserRequest {
	if !p.IsSetReq() {
		return MGetFollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetFollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetFollowUserResult struct {
	Success *user.MGetRelationUserResponse
}

var MGetFollowUserResult_Success_DEFAULT *user.MGetRelationUserResponse

func (p *MGetFollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetFollowUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetFollowUserResult) Unmarshal(in []byte) error {
	msg := new(user.MGetRelationUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetFollowUserResult) GetSuccess() *user.MGetRelationUserResponse {
	if !p.IsSetSuccess() {
		return MGetFollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetFollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.MGetRelationUserResponse)
}

func (p *MGetFollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetFansUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.MGetRelationUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).MGetFansUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetFansUserArgs:
		success, err := handler.(user.UserService).MGetFansUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetFansUserResult)
		realResult.Success = success
	}
	return nil
}
func newMGetFansUserArgs() interface{} {
	return &MGetFansUserArgs{}
}

func newMGetFansUserResult() interface{} {
	return &MGetFansUserResult{}
}

type MGetFansUserArgs struct {
	Req *user.MGetRelationUserRequest
}

func (p *MGetFansUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetFansUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetFansUserArgs) Unmarshal(in []byte) error {
	msg := new(user.MGetRelationUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetFansUserArgs_Req_DEFAULT *user.MGetRelationUserRequest

func (p *MGetFansUserArgs) GetReq() *user.MGetRelationUserRequest {
	if !p.IsSetReq() {
		return MGetFansUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetFansUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetFansUserResult struct {
	Success *user.MGetRelationUserResponse
}

var MGetFansUserResult_Success_DEFAULT *user.MGetRelationUserResponse

func (p *MGetFansUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetFansUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetFansUserResult) Unmarshal(in []byte) error {
	msg := new(user.MGetRelationUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetFansUserResult) GetSuccess() *user.MGetRelationUserResponse {
	if !p.IsSetSuccess() {
		return MGetFansUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetFansUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.MGetRelationUserResponse)
}

func (p *MGetFansUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, Req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, Req *user.MGetUserRequest) (r *user.MGetUserResponse, err error) {
	var _args MGetUserArgs
	_args.Req = Req
	var _result MGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, Req *user.GetUserRequest) (r *user.GetUserResponse, err error) {
	var _args GetUserArgs
	_args.Req = Req
	var _result GetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, Req *user.CheckUserRequest) (r *user.CheckUserResponse, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Follow(ctx context.Context, Req *user.RelationActionRequest) (r *user.BaseResponse, err error) {
	var _args FollowArgs
	_args.Req = Req
	var _result FollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CacelFollow(ctx context.Context, Req *user.RelationActionRequest) (r *user.BaseResponse, err error) {
	var _args CacelFollowArgs
	_args.Req = Req
	var _result CacelFollowResult
	if err = p.c.Call(ctx, "CacelFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFollowUser(ctx context.Context, Req *user.MGetRelationUserRequest) (r *user.MGetRelationUserResponse, err error) {
	var _args MGetFollowUserArgs
	_args.Req = Req
	var _result MGetFollowUserResult
	if err = p.c.Call(ctx, "MGetFollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFansUser(ctx context.Context, Req *user.MGetRelationUserRequest) (r *user.MGetRelationUserResponse, err error) {
	var _args MGetFansUserArgs
	_args.Req = Req
	var _result MGetFansUserResult
	if err = p.c.Call(ctx, "MGetFansUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
