// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/weirdo0314/tiny-tiktok/kitex_gen/user"
	"github.com/weirdo0314/tiny-tiktok/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Feed(ctx context.Context, Req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error)
	Publish(ctx context.Context, Req *video.PublishActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error)
	MGetVideo(ctx context.Context, Req *video.PublishListRequest, callOptions ...callopt.Option) (r *video.PublishListResponse, err error)
	Favorite(ctx context.Context, Req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error)
	CancelFavorite(ctx context.Context, Req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error)
	MGetFavorite(ctx context.Context, Req *video.FavoriteListRequest, callOptions ...callopt.Option) (r *video.FavoriteListResponse, err error)
	Comment(ctx context.Context, Req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error)
	DeleteComment(ctx context.Context, Req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error)
	MGetComment(ctx context.Context, Req *video.CommentListRequest, callOptions ...callopt.Option) (r *video.CommentListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) Feed(ctx context.Context, Req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Feed(ctx, Req)
}

func (p *kVideoServiceClient) Publish(ctx context.Context, Req *video.PublishActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Publish(ctx, Req)
}

func (p *kVideoServiceClient) MGetVideo(ctx context.Context, Req *video.PublishListRequest, callOptions ...callopt.Option) (r *video.PublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetVideo(ctx, Req)
}

func (p *kVideoServiceClient) Favorite(ctx context.Context, Req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Favorite(ctx, Req)
}

func (p *kVideoServiceClient) CancelFavorite(ctx context.Context, Req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *user.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelFavorite(ctx, Req)
}

func (p *kVideoServiceClient) MGetFavorite(ctx context.Context, Req *video.FavoriteListRequest, callOptions ...callopt.Option) (r *video.FavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetFavorite(ctx, Req)
}

func (p *kVideoServiceClient) Comment(ctx context.Context, Req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Comment(ctx, Req)
}

func (p *kVideoServiceClient) DeleteComment(ctx context.Context, Req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, Req)
}

func (p *kVideoServiceClient) MGetComment(ctx context.Context, Req *video.CommentListRequest, callOptions ...callopt.Option) (r *video.CommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetComment(ctx, Req)
}
