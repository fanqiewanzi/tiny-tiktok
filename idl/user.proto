syntax = "proto3";
package user;
option go_package = "user";

message BaseResponse {
    int64 status_code = 1;      // status_code 状态码
    string status_message = 2;  // status_message 状态描述
    int64 service_time = 3;     // service_time 响应时间
}

message User {
    uint64 user_id = 1;
    string user_name = 2;
    uint64 follow_count = 3;
    uint64 follower_count = 4;
    bool is_follow = 5;
}

message CreateUserRequest {
    string user_name = 1;
    string password = 2;
}

message CreateUserResponse {
    BaseResponse base_resp = 1;
    uint64 user_id = 2;
}

message MGetUserRequest {
    repeated uint64 target_user_ids = 1;
    uint64 user_id = 2;
}

message MGetUserResponse {
    repeated User users = 1;
    BaseResponse base_resp = 2;
}

message GetUserRequest {
    uint64 user_id = 1;
    uint64 target_user_id = 2;
}

message GetUserResponse {
    BaseResponse base_resp = 1;
    User user = 2;
}

message CheckUserRequest{
    string user_name = 1;
    string password = 2;
}

message CheckUserResponse{
    uint64 user_id = 1;
    BaseResponse base_resp = 2;
}

message RelationActionRequest {
    uint64 user_id = 1;
    uint64 to_user_id = 2;
}

message MGetRelationUserRequest {
    uint64 user_id = 1;
    uint64 target_id = 2;
}

message MGetRelationUserResponse {
    BaseResponse base_resp = 1;
    repeated User users = 2;
}

service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}
    rpc MGetUser (MGetUserRequest) returns (MGetUserResponse) {}
    rpc GetUser (GetUserRequest) returns (GetUserResponse) {}
    rpc CheckUser (CheckUserRequest) returns (CheckUserResponse) {}
    rpc Follow (RelationActionRequest) returns (BaseResponse) {}
    rpc CacelFollow (RelationActionRequest) returns (BaseResponse) {}
    rpc MGetFollowUser (MGetRelationUserRequest) returns (MGetRelationUserResponse) {}
    rpc MGetFansUser (MGetRelationUserRequest) returns (MGetRelationUserResponse) {}
}